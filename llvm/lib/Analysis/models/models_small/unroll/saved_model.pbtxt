meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "PartitionedCall"
        input_arg {
          name: "args"
          type_list_attr: "Tin"
        }
        output_arg {
          name: "output"
          type_list_attr: "Tout"
        }
        attr {
          name: "Tin"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "Tout"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "config"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "config_proto"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "executor_type"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "StatefulPartitionedCall"
        input_arg {
          name: "args"
          type_list_attr: "Tin"
        }
        output_arg {
          name: "output"
          type_list_attr: "Tout"
        }
        attr {
          name: "Tin"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "Tout"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "config"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "config_proto"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "executor_type"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "allowed_devices"
          type: "list(string)"
          default_value {
            list {
            }
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.15.0"
    tensorflow_git_version: "unknown"
    stripped_default_attrs: true
  }
  graph_def { node {
  name: "Input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 87
        }
      }
    }
  }
}
node {
  name: "sequential_14/dense_28/Cast"
  op: "Cast"
  input: "Input"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "sequential_14/dense_28/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 87
          }
          dim {
            size: 3
          }
        }
        tensor_content: "s\350\322\275\305\213\016\275\204\2579=\265\365V\276\033~\256<\332\244\216>\302\327L\274\327dn>H\223$>\205\t\346=\377\344\315\275\227v\212\275%(\037\275/;\233\276\334\2604>\037kK\276\202\256h=\216d\220=\271\r<>\026,%>\323P>\276\335>`<\304\301\254\276\230\210\374=\036?O\275W\206\276=F\336\203>\307*#\275\005\254\202\276\312*\n>\026\014\203=fU\035=\027\312\207>\247i\301\275\371[c\276\367\245%\276\324@}=W\305\325\274\236\317$>\337O1>\312\247\'>\356:<>\260\220\360\275Z\253^\275\257\272K\276\232I\222\274\302|\346<\237O\036\2769\337\203\300\352W\207@={r@\037\2335>*\325\376=\223\304\227=\267\266\004@z\215\241>\214\3565\276\3419e\276t8\311\275\2106\227\275\036\245v\2760D]>\270\2508=%Md\275\374\220p>\225\344+\2756\016A\275RQ\355=<H\333\275\241\353\330\275\263\001\245\275\002/\366\275\211\005\215<\315:\375<\342\373\325\273G\323\217\275N\260\236\275\267^I<\026s\220\274\314A\301\275\025\020~<]\300\264\274C\n\250\275\265\030\251:<\024\245\274EC\371<\261@\237\274rN\277\274\013\205\245\276\234N\003=\310_1=\316\300\225=\243`L\2763\357\245\275\334r\204;a\356G\276\016:\314=\016\251\301;\375\200e\273\204\2478=@\244F\276d+\336<N\024g>T\335\313=\007,\201>8\363\257<\227=C>\241\351\331=\334\270U=\263/\252\275M%\267>\224H1<h\360\260\275\005;<>k\240.\275\013\310{\2740\261\017\276s\353\305=\233_\004\275\361jb>a\225(\276i\014a>\233U\352\275\307,\377\275\331\232\344\275\363\341@;,y2=\322\317\325=gz\323=\017\312\266\274\370\003\204\276\260\021\034>\306\276\316=2\356K<q\n\334=C\301\007\275\"\303\350<hw\215\275\000:\021=Ob@\276\014+W\275D\244n\275\205(\023\274n\017\216\276\372\006\275>%h\332\276Cf]\276\252\3116>-\310\205=\032k*>L\236\334=\221\311\222=bkq>`\005f>Or\017\277S\222\n\277\260\r\274\274\347b\026\274\000\241R\275\247n\317\275zB\246>\256\210\266>f\001\346\275`x\222=\372\234\206\276\260\031\177\274X\210\220\276Xx\361\275\372\360\316=\001h\237=)\367\036\27525\315\274\251G\362=.I\306>\356\020\002=\377\204\261\275]\274\310>\302\026\240\275\206\372\237\276\035\211\335=\200B!\276@\000m\276e\224\005;\333l\252\274\030\354w\275\210Z\255=\275\243\220\276\372\250\342=4\365\001>\270|>\276\000\324\037\272\004\267\032>|\356\232=\267\365\037\276\344\003\201=\266\243\333\275\000\014t>\272l$>\002\016*\276\034\330\020\276\037\000\036=d\320h<\025\212\335<I\253\031> \350\000=&(\261>\311l\035=\332nI=\230-\017>\027SZ\274T1\325\275\017\364\232\275)\371\234\276L\306~\276\016Wi>\250t!>b\345\020\276l\217;>\320\255\351\275*\231k?\205\224d\277\314m`\277`\262\237\275 \024Y<\020\375\203\274\221\210A>\370\301]>.P\344=\317\014\027\276l\373\360\275\330p\345\275\362\353>;~\275\242=\257\307q\276\343\322\267\275<R\222\275U \254\276\374\345\304>8\t\245\276\245Wn\276WD\267\275\340\272j>e5\211\275\236\315\202\275|\326\240>\311=\332\274b\013d\276\210\010-\275(\357\032=\000\320\222;L\364#\276\200?T=p\032D>\300\2631>\355\276\263\2754\252\030\300\306i\013@\001\216\362?\315\217\253=^\330\237=\315\r\255="
      }
    }
  }
}
node {
  name: "sequential_14/dense_28/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential_14/dense_28/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_14/dense_28/MatMul"
  op: "MatMul"
  input: "sequential_14/dense_28/Cast"
  input: "sequential_14/dense_28/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential_14/dense_28/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\255\323)@\233\323)\277\177._\277"
      }
    }
  }
}
node {
  name: "sequential_14/dense_28/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_14/dense_28/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_14/dense_28/BiasAdd"
  op: "BiasAdd"
  input: "sequential_14/dense_28/MatMul"
  input: "sequential_14/dense_28/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_14/dense_28/Relu"
  op: "Relu"
  input: "sequential_14/dense_28/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_14/dense_29/MatMul/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
        tensor_content: "\317:\024\277\334\351\220>\036\320\244>"
      }
    }
  }
}
node {
  name: "sequential_14/dense_29/MatMul/ReadVariableOp"
  op: "Identity"
  input: "sequential_14/dense_29/MatMul/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_14/dense_29/MatMul"
  op: "MatMul"
  input: "sequential_14/dense_28/Relu"
  input: "sequential_14/dense_29/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential_14/dense_29/BiasAdd/ReadVariableOp/resource"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: -2.492954969406128
      }
    }
  }
}
node {
  name: "sequential_14/dense_29/BiasAdd/ReadVariableOp"
  op: "Identity"
  input: "sequential_14/dense_29/BiasAdd/ReadVariableOp/resource"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential_14/dense_29/BiasAdd"
  op: "BiasAdd"
  input: "sequential_14/dense_29/MatMul"
  input: "sequential_14/dense_29/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential_14/dense_29/Sigmoid"
  op: "Sigmoid"
  input: "sequential_14/dense_29/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "sequential_14/dense_29/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 414
}
 }
  signature_def {
    key: "predict"
    value {
      inputs {
        key: "Input"
        value {
          name: "Input:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
            dim {
              size: 87
            }
          }
        }
      }
      outputs {
        key: "prob"
        value {
          name: "Identity:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}